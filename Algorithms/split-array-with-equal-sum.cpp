// 548. Split Array with Equal Sum
// https://leetcode.com/problems/split-array-with-equal-sum/

/*
Given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions:

0 < i, i + 1 < j, j + 1 < k < n - 1
Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.
where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.
Example:
Input: [1,2,1,2,1,2,1]
Output: True
Explanation:
i = 1, j = 3, k = 5. 
sum(0, i - 1) = sum(0, 0) = 1
sum(i + 1, j - 1) = sum(2, 2) = 1
sum(j + 1, k - 1) = sum(4, 4) = 1
sum(k + 1, n - 1) = sum(6, 6) = 1
Note:
1 <= n <= 2000.
Elements in the given array will be in range [-1,000,000, 1,000,000].
*/

#include <iostream> // std::cout; std::cin
#include <fstream> // std::fstream::open; std::fstream::close;
#include <ctime>
#include <cstdlib> // rand
#include <cassert> // assert
#include <cctype> // isalnum; isalpha; isdigit; islower; isupper; isspace; tolower; toupper
#include <cmath> // pow; sqrt; round; fabs; abs; log
#include <climits> // INT_MIN; INT_MAX; LLONG_MIN; LLONG_MAX; ULLONG_MAX
#include <cfloat> // DBL_EPSILON; LDBL_EPSILON
#include <cstring> // std::memset
#include <algorithm> // std::swap; std::max; std::min; std::min_element; std::max_element; std::minmax_element; std::next_permutation; std::prev_permutation; std::nth_element; std::sort; std::lower_bound; std::upper_bound; std::reverse
#include <limits> // std::numeric_limits<int>::min; std::numeric_limits<int>::max; std::numeric_limits<double>::epsilon; std::numeric_limits<long double>::epsilon;
#include <numeric> // std::accumulate; std::iota
#include <string> // std::to_string; std::string::npos; std::stoul; std::stoull; std::stoi; std::stol; std::stoll; std::stof; std::stod; std::stold; 
#include <list> // std::list::merge; std::list::splice; std::list::merge; std::list::unique; std::list::sort
#include <bitset>
#include <vector>
#include <deque>
#include <stack> // std::stack::top; std::stack::pop; std::stack::push
#include <queue> // std::queue::front; std::queue::back; std::queue::pop; std::queue::push; std::priority_queue; std::priority_queue::top; std::priority_queue::push; std::priority_queue::pop
#include <set> // std::set::count; std::set::find; std::set::equal_range; std::set::lower_bound; std::set::upper_bound
#include <map> // std::map::count; std::map::find; std::map::equal_range; std::map::lower_bound; std::map::upper_bound
#include <unordered_set>
#include <unordered_map>
#include <utility> // std::pair; std::make_pair
#include <iterator>
#include <functional> // std::less<int>; std::greater<int>
using namespace std;

// BEGIN: https://discuss.leetcode.com/topic/85034/c-clean-code-skip-0s-9-ms
// BEGIN: Time Complexity O(n ^ 3) and Space Complexity O(n)
class Solution {
public:
	bool splitArray(vector<int>& nums) {
		vector<long long> sums;
		long long s = 0;
		for (size_t i = 0; i < nums.size(); i++) {
			if (i > 1 and nums.at(i - 1) == 0 and nums.at(i) == 0) {
				continue;
			}
			s += nums.at(i);
			sums.push_back(s);
		}
		for (size_t i = 1, n = sums.size(); i + 6 <= n; i++) {
			long long a = sums.at(i - 1);
			for (size_t j = i + 2; j + 4 <= n; j++) {
				long long b = sums.at(j - 1) - sums.at(i);
				for (size_t k = j + 2; a == b and k + 2 <= n; k++) {
					long long c = sums.at(k - 1) - sums.at(j);
					long long d = sums.back() - sums.at(k);
					if (b == c and c == d) {
						return true;
					}
				}
			}
		}
		return false;
	}
};
// END: Time Complexity O(n ^ 3) and Space Complexity O(n)
// END: https://discuss.leetcode.com/topic/85034/c-clean-code-skip-0s-9-ms

int main(void) {
	Solution solution;
	vector<int> nums;
	bool result, answer;

	nums = {};
	answer = false;
	result = solution.splitArray(nums);
	assert(answer == result);

	nums = {47772, 78785, 46273, 30033, 69022, -49024, -14106, 31893, -79662, 15949, -56289, -41595, 10954, 24834, -64191, -84385, 53024, 41655, -95488, -62488, 82066, -77052, 90283, 48269, -86851, -37915, -62115, 8837, 51873, -44513, 59107, 49104, 1549, 51379, 25491, 48519, 15049, -23257, 38313, 62857, -10780, 36142, 14850, -34638, 47641, 74066, 86264, 39521, -68071, 65581, -80682, 80316, 15265, 12808, -27, -89753, -85592, -51822, -91743, -19110, -94463, -29338, 22753, -81860, 86927, -57609, 51137, 53791, 24661, 31439, 23124, 24490, -50184, 46287, -36887, -56048, -99189, -3631, -59654, 72889, -82227, -57795, 17732, 8514, 71209, 22093, 42798, 16344, -72296, -28959, 83629, 81546, -36953, 71344, 56186, 91829, -68753, 13024, 50278, 52896, 81452, -27968, -37735, 50879, 68912, 97506, -54604, -98090, -76170, -64191, 77171, -12635, -12852, 52469, 18389, 17243, -33061, 63197, 13838, 86693, 367, 49788, -98802, 65533, -2888, -87919, 71292, 17859, 37045, -86096, -54779, 34416, -5530, 77674, -67443, 48676, 59985, 96393, 84606, 96325, -16410, 36096, 88100, -47795, 62921, 71696, 37755, -9942, -89403, -55556, 38846, 68217, 97758, 97849, 23317, 72352, -35931, 31373, -89012, 88949, 54710, 25538, 97596, -34110, 94129, 3514, 35361, 18937, -93041, -83156, -71375, -76976, -18819, 36631, 65557, -37461, -57064, 18567, 70447, 33977, 89781, 17431, -11077, 75892, 13637, -12206, -3672, 4525, -85936, 25683, -43659, -22527, 37595, 84629, 351, 70867, 6919, -83946, 56772, -47428, -14777, 71555, -63280, 89638, 51863, -88705, -76918, 26463, -34400, 36266, -10441, 94502, 48609, 95372, 97713, 8758, -50912, -92167, -66819, -53850, -39255, 8642, 25911, 8885, 42549, -61347, 45833, -25529, 54770, 87129, 63653, -70460, -24794, 18870, 40010, 34549, 11376, 80355, 69872, 70550, 77550, 30580, 3910, 94946, 66056, 52781, 53132, 29986, 5797, 27324, 36539, 33021, 58595, 22812, -94138, -73855, 19117, 64077, 12285, 64427, 90994, 95331, 6237, -39471, 78814, 63665, -80308, 89126, 41034, -52103, 62980, 29656, 82678, -64012, -73964, 84873, 63121, 28559, 27955, 31523, 32526, -89573, -42127, 29493, 13497, -6682, 92212, -96664, 46064, 51314, -8181, -78760, 29947, -25923, 74928, 39332, 17922, 58260, 34044, 11037, 17277, -84723, 10184, 94182, 93436, 82379, 55599, 75643, 99231, 48781, -78240, 97991, 75086, 49351, 135, -5555, 79708, 11517, 46995, -25267, 64370, -15800, 40267, 89282, 90270, 94130, 14506, 36756, -32254, 21779, -32717, -83486, 6959, 92827, 38765, 57353, 72066, 4291, 78151, 61983, -52125, -25193, 75246, 90781, -63116, 76393, -75737, -55069, 14521, 54212, 10059, 49476, -75559, 23274, 50786, 33985, 96573, 96012, 17545, 54154, 51611, 56489, -85693, -75062, 11319, 89797, 22033, -17100, -7078, -67168, 54922, 1951, 95766, 14725, 46888, -62179, 8814, 52876, 94291, -63304, 52909, -98368, -65577, 10901, 85187, 99147, 44361, -40168, 81783, 68821, 88763, 3973, 49390, -39766, 86685, 98046, 94964, 96068, 2446, 74714, -494, 28035, 39321, 47561, 42016, 6018, -69606, 12055, -62210, -45464, 16179, -19422, 8700, 5130, 35053, -64118, 76048, 94471, -50061, 11543, -45998, 96000, 54894, 81336, -333, -51308, 84697, 73637, 17957, 47696, 68120, 69484, 15606, 39068, -55303, -47370, 46300, -99582, -71266, 36148, 83861, 79792, -80882, 36573, 90111, -14824, -7622, 71663, 71068, 42882, 12075, 72375, 98702, 83590, -31309, 58991, 52409, 50187, 46858, 29601, 65040, 20365, 37410, -82923, -95233, 32352, -73148, 48840, -46413, 25079, -16911, -85445, -11450, -95026, 7194, 26594, 50363, 21459, 8659, 50450, 49699, -8508, -21625, 40747, -62482, 61762, 93742, 80135, -52587, -62054, -281, 33571, 98075, 54882, 97966};
	answer = false;
	result = solution.splitArray(nums);
	assert(answer == result);

	nums = {1, 2, 1, 2, 1, 2, 1};
	answer = true;
	result = solution.splitArray(nums);
	assert(answer == result);

	cout << "\nPassed All\n";
	return 0;
}